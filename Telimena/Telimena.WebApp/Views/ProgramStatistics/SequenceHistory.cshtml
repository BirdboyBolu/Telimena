@using DotNetLittleHelpers
@using Telimena.WebApp.Core.DTO
@using Telimena.WebApp.Models.Shared
@using Telimena.WebApp.UiStrings
@model Telimena.WebApp.Models.ProgramStatistics.SequenceHistoryViewModel

@section styles{
    <style type="text/css">
        td.details-control {
            background: url('../../Content/Ionicons/png/512/plus-circled.png') no-repeat center center;
            background-size: 24px 24px;
            cursor: pointer;
        }

        tr.shown td.details-control {
            background: url('../../Content/Ionicons/png/512/minus-circled.png') no-repeat center center;
            background-size: 24px 24px;
        }
    </style>
}

@Html.Partial("_ProgramHeaderMenu", new ProgramHeaderMenuViewModel { ProgramName = Model?.ProgramName, TelemetryKey = Model?.TelemetryKey })

<div class="row">
    <div class="col-md-12">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Session history details</h3>
            </div>
            <div class="box-body dataTables_wrapper form-inline dt-bootstrap">
                <table id="@Strings.Id.SequenceHistoryTable" class="table table-bordered table-hover table-condensed" style="width: 100%;"></table>
            </div>
        </div>
    </div>
</div>

@section scripts
{

    <script type="text/javascript">
        $(document).ready(function() {

            
            function loadTable(url) {
                return {
                    serverSide: true,
                    searching: false,
                    processing: true,
                    lengthChange: false,
                    //lengthMenu: [[15, 25, 70, -1], [15, 25, 70, "All"]],
                    pageLength: -1,
                    order: [[2, 'desc']],
                    ajax: url,

                    columns: [
                        {
                            name: "@nameof(SequenceHistoryData.DataType)",
                            data: "@nameof(SequenceHistoryData.DataType).ToLowerFirstChar()",
                            title: "@nameof(SequenceHistoryData.DataType)",
                            sorting: false
                        },
                        {
                            name: "@nameof(SequenceHistoryData.Timestamp)",
                            data: "@nameof(SequenceHistoryData.Timestamp).ToLowerFirstChar()",
                            render: function(data, type, row, meta) {
                                return toFormattedTimestamp(new Date(data));
                            },
                            title: "@nameof(SequenceHistoryData.Timestamp)",
                            sorting: false

                        },
                        {
                            name: "@nameof(SequenceHistoryData.Order)",
                            data: "@nameof(SequenceHistoryData.Order).ToLowerFirstChar()",
                            title: "@nameof(SequenceHistoryData.Order)",
                            sorting: false

                        },
                        {
                            name: "@nameof(SequenceHistoryData.EntryKey)",
                            data: "@nameof(SequenceHistoryData.EntryKey).ToLowerFirstChar()",
                            title: "@nameof(SequenceHistoryData.EntryKey)",
                            sorting: false

                        },
                        {
                            name: "@nameof(SequenceHistoryData.Message)",
                            data: "@nameof(SequenceHistoryData.Message).ToLowerFirstChar()",
                            title: "@nameof(SequenceHistoryData.Message)",
                            sorting: false

                        },
                        {
                            title: "See details",
                            "className": 'details-control',
                            "data": null,
                            "defaultContent": '',
                            sorting: false

                        },
                    ]
                }
            }

            var table = $('#@Strings.Id.SequenceHistoryTable').DataTable(loadTable(
                "@Url.Action("GetSequenceHistoryData")" +
                "?telemetryKey=@Model.TelemetryKey&sequenceId=@Url.Encode(Model.SequenceId)"));


            $('#@Strings.Id.SequenceHistoryTable tbody').on('click',
                'td.details-control',
                function() {
                    var tr = $(this).closest('tr');
                    var row = table.row(tr);

                    if (row.child.isShown()) {
                        // This row is already open - close it
                        row.child.hide();
                        tr.removeClass('shown');
                    } else {
                        // Open this row
                        row.child(format(row.data())).show();
                        tr.addClass('shown');
                    }
                });


            

            function formatDetails(d) {

                var propsRows = '';

                for (var property in d.properties) {
                    if (d.properties.hasOwnProperty(property)) {
                        var key = property;
                        var value = d.properties[property];

                        propsRows += '<tr><td style="font-weight: bold; padding: 2px;">' + key + '</td><td style="padding: 2px;">'+value+'</td></tr>';
                    }
                }

                var metricRows = '';

                for (var property in d.metrics) {
                    if (d.metrics.hasOwnProperty(property)) {
                        var key = property;
                        var value = d.metrics[property];

                        metricRows+= '<tr><td style="font-weight: bold; padding: 2px;">' + key + '</td><td style="padding: 2px;">' + value + '</td></tr>';
                    }
                }               

                var propsTable = '<table   cellpadding="0" cellspacing="0" border="1" style="display: inline-block; margin: 0px 15px;"><thead><tr><th colspan="2">Properties</th></tr></thead><tbody>' + propsRows + '</tbody></table>';
                var metricsTable = '<table cellpadding="0" cellspacing="0" border="1" style="display: inline-block; margin: 0px 15px;"><thead><tr><th colspan="2">Metrics</th></tr></thead><tbody>' + metricRows + '</tbody></table>';


                return '<span >'+propsTable +'</span>' + '<span>'+ metricsTable + '</span>';
            }

            function formatStackTrace(d) {

                var rows = '';
                for (var i = 0; i < d.stackTrace.length; i++) {
                    var method = d.stackTrace[i].method;
                    var file = d.stackTrace[i].fileName;
                    var line = d.stackTrace[i].line;

                    rows += '<p style="margin: 0px;">' +
                        '   at <span style="font-weight: bold;">' +
                        method +
                        '()</span>' +
                        ' in <span class="font-weight-light">[' +
                        file +
                        ']</span>.' +
                        ' Line: <span style="font-weight: bold;">' +
                        line +
                        '</span>' +
                        '</p>';
                }

                return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;"><tr><td>' +
                    rows +
                    '</td></tr></table>';
            }
            function format(d) {
                if (d.dataType === "Exception") {
                    return formatStackTrace(d);
                } else {
                    return formatDetails(d);
                }
            }
        });
    </script>

}
