@using DotNetLittleHelpers
@using Telimena.WebApp.Core.Messages
@using Telimena.WebApp.Core.Models
@using Telimena.WebApp.UiStrings
@model Telimena.WebApp.Models.ProgramDetails.ProgramManagementViewModel
@{
    ViewBag.Title = "Index";
}

@section styles{
    @Styles.Render("//cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css")
    <style type="text/css">
        .confirmation { }

        .fileinput-button {
            position: relative;
            overflow: hidden;
        }

        .fileinput-button input {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            opacity: 0;
            filter: alpha(opacity=0);
            transform: translate(-300px, 0) scale(4);
            font-size: 23px;
            direction: ltr;
            cursor: pointer;
        }
    </style>
}


<div class="row">
    <div class="col-md-4">
        <div class="box box-primary" id="@Strings.Id.ProgramSummaryBox">
            <div class="box-header">
                <h3 class="box-title">Program summary</h3>
            </div>
            <div class="box-body">
                <label class="confirmation label label-md" id="@Strings.Id.ProgramSummaryBoxConfirmationLabel" style="display: none"></label>

                <div class="form-group">
                    <label>Name: </label>
                    <span class="@Strings.Css.ProgramInfoElement">@Model.ProgramName</span>
                </div>
                <div class="form-group">
                    <label>Description: </label>
                    <span class="@Strings.Css.ProgramInfoElement">@Model.ProgramDescription</span>
                </div>
                <div class="form-group">
                    <label>Telemetry Key: </label>
                    <span class="@Strings.Css.ProgramInfoElement">@Model.TelemetryKey</span>
                </div>
                <div class="form-group">
                    <label>Primary assembly name: </label>
                    <span class="@Strings.Css.ProgramInfoElement">@Model.PrimaryAssemblyName</span>
                </div>
                <div class="form-group">
                    <label>Latest version: </label>
                    <span id="latestVersion">...</span>
                </div>
                <div class="form-group">
                    <label>Versions count: </label>
                    <span id="versionsCount">...</span>
                </div>
                <div class="form-group">
                    <label>Download link: </label>
                    <a href="@Model.ProgramDownloadUrl">@Model.ProgramDownloadUrl</a>
                </div>
                <div class="form-group">
                    <label>Updater: </label>
                    @Html.DropDownList("Updaters", Model.UpdatersSelectList, new { id = @Strings.Id.UpdaterSelectList })
                    <input type='submit' id="@Strings.Id.SubmitUpdaterChange" value='Submit' />
                </div>
                <div class="form-group">
                    <input type="button" class="btn btn-danger" id="@Strings.Id.DeleteProgramButton" value="Delete program" />
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">

        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Program Package Info</h3>
            </div>
            <div class="box-body">
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Package Id</b> <a class="pull-right">@(Model.ProgramPackageInfo?.Id)</a>
                    </li>
                    <li class="list-group-item">
                        <b>File Name</b> <a class="pull-right">@(Model.ProgramPackageInfo?.FileName)</a>
                    </li>
                    <li class="list-group-item">
                        <b>File Size</b> <a class="pull-right">@(Model.ProgramPackageInfo?.FileSizeBytes.GetSizeString())</a>
                    </li>
                    <li class="list-group-item">
                        <b>Supported toolkit version</b> <a class="pull-right">@(Model.ProgramPackageInfo?.SupportedToolkitVersion)</a>
                    </li>
                    <li class="list-group-item">
                        <b>Uploaded date</b> <a class="pull-right utcdate-tolocaldate">@(Model.ProgramPackageInfo?.UploadedDate.ToString(Strings.DateTimeFormat))</a>
                    </li>
                </ul>
            </div>
        </div>


    </div>

    <div class="col-md-4">
        <form id="uploadProgramPackageForm" enctype="multipart/form-data" method="post">
            <div class="box box-primary">

                <div class="box-header">
                    <h3 class="box-title">Main program package</h3>
                    <h5>Upload the main program package</h5>
                </div>
                <div class="box-body">
                    <label class="confirmation label label-md" style="display: none"></label>
                    <div class="form-group">
                        <span class="btn btn-success fileinput-button uploadedPackage">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Select file</span>
                            <input  type="file"
                                   name="uploadedPackage"/>
                        </span>
                    </div>
                    <div class="InfoContainer">
                        <div class="info fileName">
                        </div>
                        <div class="info fileType">
                        </div>
                        <div class="info fileSize">
                        </div>
                    </div>
                    <div class="progress CustomProgress">
                        <div
                            class="progress-bar" role="progressbar"
                            aria-valuenow="0" aria-valuemin="0"
                            aria-valuemax="100" style="width: 0%;">
                            <span></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="">
                            <input type="submit" value="Upload Package" class="btn btn-lg btn-primary"/>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="row">

    <div class="col-md-6">
        <form id="@Strings.Id.UploadProgramUpdateForm" enctype="multipart/form-data" method="post">
            <div class="box box-primary">
                <div class="box-header">
                    <h3 class="box-title">Create Update Package</h3>
                </div>
                <div class="box-body">
                    <label class="confirmation label label-md" style="display: none" Id="@Strings.Id.UploadProgramUpdateConfirmationLabel"></label>
                    <div class="form-group">
                        <label>Toolkit version used: </label>
                        <input class="form-control" type="text" id="updatePackageToolkitVersion"/>
                    </div>
                    <div class="form-group">
                        <span class="btn btn-success fileinput-button uploadedPackage">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Add files...</span>
                            <input type="file"
                                   name="uploadedPackage"/>
                        </span>
                    </div>
                    <div class="InfoContainer">
                        <div class="info fileName">
                        </div>
                        <div class="info fileType">
                        </div>
                        <div class="info fileSize">
                        </div>
                    </div>
                    <div class="progress CustomProgress">
                        <div
                            class="progress-bar" role="progressbar"
                            aria-valuenow="0" aria-valuemin="0"
                            aria-valuemax="100" style="width: 0%;">
                            <span></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="">
                            <input type="submit" value="Create Package" class="btn btn-lg btn-primary"/>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="col-md-6">


        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Update Packages</h3>
            </div>
            <div class="box-body">
                <label class="confirmation label label-md" style="display: none"></label>
                <table class="table table-bordered table-hover dataTable">
                    <thead>
                    <tr>
                        <th>Id</th>
                        <th>Is Beta</th>
                        <th>FileName</th>
                        <th>Version</th>
                        <th>Toolkit Version</th>
                        <th>Uploaded Date</th>
                        <th>File Size</th>
                    </tr>
                    </thead>
                    <tbody>

                    @foreach (ProgramUpdatePackageInfo pkg in Model.UpdatePackages)
                    {
                        <tr>
                            <td>@pkg.Id</td>
                            <td style="text-align: center">
                                <input type="checkbox" data-pkg-id="@pkg.Id" onchange="TogglePackageBeta(this)" @(pkg.IsBeta ? "checked" : "")/>
                            </td>
                            <td>
                                <a href="/api@(Url.Action("Get", "UpdatePackages") + "?id=" + pkg.Id)">@pkg.FileName</a>
                            </td>
                            <td>@pkg.Version</td>
                            <td>@pkg.SupportedToolkitVersion</td>
                            <td class="utcdate-tolocaldate">@pkg.UploadedDate.ToString(Strings.DateTimeFormat)</td>
                            <td>@pkg.FileSizeBytes.ConvertBytesToMegabytes() MB</td>
                        </tr>
                    }
                    </tbody>

                </table>

            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("//cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js")

    <script type="text/javascript">
        $(document).ready(function() {
            $('.dataTable').DataTable();
            globalUtcConversion();
            LoadCurrentVersion();
            $('#@Strings.Id.DeleteProgramButton').click(function() {
                DeleteProgram(this);
            });
            $('#@Strings.Id.SubmitUpdaterChange').click(function() {
                SetUpdater(this);
            });
            $('.uploadedPackage').change(function(e) { SingleFileSelected(e, $(this).find('input')) });
            $('#@Strings.Id.UploadProgramUpdateForm').submit(CreateUpdatePackage);
            $('#uploadProgramPackageForm').submit(function(e) {
                e.preventDefault();
                var form = $('#uploadProgramPackageForm')[0];
                var formData = new FormData(form);
                UploadFile(formData, '@Url.Action("Upload", "ProgramPackages")/@Model.TelemetryKey',
                    $(this).find('input'));
            });
        });


        function DeleteProgram(input) {
            if (confirm('Are you sure you want to delete the program? (this cannot be undone!)')) {

                var prgName = prompt("If you're so sure, please enter the program name", "");
                if (prgName !== '@Model.ProgramName') {
                    ShowConfirmationBox(input, "label-default", "Program name mismatched. Deleting cancelled");
                    return;
                }

                $.ajax({
                    type: 'DELETE',
                    url: '/api' + '@Url.Action("Delete", "Programs", new { telemetryKey = @Model.TelemetryKey })',
                    success: function(result) {
                        ShowConfirmationBox(input,
                            "label-success",
                            result);
                    },
                    error: function(xhr) {
                        ShowConfirmationBox(input, "label-danger", xhr.responseJSON.Message);
                    }
                });
            } else {
                // Do nothing!
            }

        }


        function SetUpdater(input) {
            var id = $('#@Strings.Id.UpdaterSelectList').val();

            $.ajax({
                type: 'PUT',
                url: '/api' +
                    '@Url.Action("SetUpdater", "Programs")?telemetryKey=@Model.TelemetryKey&updaterGuid=' +
                    id,
                success: function(result) {
                    ShowConfirmationBox(input,
                        "label-success",
                        result + ". Reloading page...");
                    setTimeout(location.reload.bind(location), 1500);
                },
                error: function(xhr) {
                    ShowConfirmationBox(input, "label-danger", xhr.responseJSON.Message);
                }
            });
        }

        function TogglePackageBeta(input) {
            var id = $(input).data("pkg-id");

            $.ajax({
                type: 'POST',
                url: '/api' +
                    '@Url.Action("ToggleBetaSetting", "UpdatePackages")' +
                    "?updatePackageGuid=" +
                    id +
                    "&isBeta=" +
                    input.checked,
                success: function(result) {
                    ShowConfirmationBox(input,
                        "label-success",
                        'Set package with ID: [' + id + '] Beta flag to: ' + result);
                },
                error: function(xhr) {
                    ShowConfirmationBox(input, "label-danger", xhr.responseJSON.Message);
                }
            });
        }

        function SingleFileSelected(evt, input) {
            var selectedFile = $(input)[0].files[0];
            if (selectedFile) {
                var fileSize = 0;
                if (selectedFile.size > 1048576) {
                    fileSize = Math.round(selectedFile.size * 100 / 1048576) / 100 + " MB";
                } else if (selectedFile.size > 1024) {
                    fileSize = Math.round(selectedFile.size * 100 / 1024) / 100 + " KB";
                } else {
                    fileSize = selectedFile.size + " Bytes";
                }
                var infoContainer = input.closest('.form-group').next('.InfoContainer');
                infoContainer.find(".fileName").text("Name : " + selectedFile.name);
                infoContainer.find(".fileType").text("Type : " + selectedFile.type);
                infoContainer.find(".fileSize").text("Size : " + fileSize);
            }
        }

        function UploadFile(formData, url, button) {

            $.ajax({
                url: '/api' + url,
                type: 'POST',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                xhr: function() {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.addEventListener('progress',
                            function(e) {
                                ProgressHandlingFunction(e, button);
                            },
                            false);
                    }
                    return myXhr;
                },
                //Ajax events
                success: function(result) {
                    ShowConfirmationBox(button, "label-success", 'Uploaded package with ID: [' + result + ']');
                },
                error: function(xhr) {
                    ShowConfirmationBox(button, "label-danger", xhr.responseJSON.Message);
                },


            });
        }


        function CreateUpdatePackage(e) {
            e.preventDefault();
            var model = {
                @nameof(CreateUpdatePackageRequest.TelemetryKey): '@Model.TelemetryKey',
                @nameof(CreateUpdatePackageRequest.PackageVersion): $('#updatePackageVersion').val(),
                @nameof(CreateUpdatePackageRequest.ToolkitVersionUsed): $('#updatePackageToolkitVersion').val(),
            };
            var modelString = JSON.stringify(model);

            ValidateUpdatePackageRequest($(this).find(':submit'), modelString, UploadFile);
        }


        function ProgressHandlingFunction(e, button) {
            var progressBar = $(button).closest('.form-group').prev('.progress').find('.progress-bar');
            if (e.lengthComputable) {
                var percentComplete = Math.round(e.loaded * 100 / e.total);
                progressBar.css("width",
                    percentComplete + '%').attr('aria-valuenow', percentComplete);
                progressBar.find('span').text(percentComplete + "%");
            } else {
                progressBar.find('span').text('unable to compute');
            }
        }

        function HideConfirmationBox(button) {
            $(button).closest('.box-body').find('.confirmation').hide();
        }

        function ShowConfirmationBox(button, classToAdd, text) {
            var btn = $(button).closest('.box-body').find('.confirmation');
            btn.show().attr("class", "confirmation label label-md " + classToAdd).text(text);
        }

        function ValidateUpdatePackageRequest(button, modelString, successCallback) {

            $.ajax({
                    type: 'POST',
                    url: '/api' + '@Url.Action("ValidateRequest", "UpdatePackages")',
                    contentType: "application/json; charset=utf-8",
                    datatype: 'Json',
                    data: modelString
                })
                .done(function() {
                    var form = $('#@Strings.Id.UploadProgramUpdateForm')[0];
                    var formData = new FormData(form);
                    formData.append('Model', modelString);
                    successCallback(formData, '@Url.Action("Upload", "UpdatePackages")', button);
                })
                .fail(function(xhr) {
                    ShowConfirmationBox(button, 'label-danger', 'Error: ' + xhr.responseJSON.Message);
                });
        }


        function LoadCurrentVersion() {
            $('#latestVersion').html('...');
            $.ajax({
                type: 'GET',
                url: '/api' + '@Url.Action("GetLatestVersionInfo", "ProgramVersions")',
                data: { id: '@Model.TelemetryKey' },
                success: function(response) {
                    if (response.PrimaryAssemblyVersion !== undefined) {
                        $('#latestVersion').html(response.PrimaryAssemblyVersion.LatestVersion);
                    }
                }
            });
            $('#versionsCount').html('...');
            $.ajax({
                type: 'GET',
                url: '/api' + '@Url.Action("GetVersionsCount", "ProgramVersions")',
                data: { id: '@Model.TelemetryKey' },
                success: function(response) {
                    $('#versionsCount').html(response);
                }
            });
        }


    </script>

}
