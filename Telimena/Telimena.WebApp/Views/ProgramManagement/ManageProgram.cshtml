@using System.Security.Policy
@using DotNetLittleHelpers
@using Telimena.Portal.Api.Models.RequestMessages
@using Telimena.WebApp
@using Telimena.Portal.Api.Models
@using Telimena.Portal.Api.Models.DTO
@using Telimena.WebApp.Controllers.Api.V1
@using Telimena.WebApp.Core.Messages
@using Telimena.WebApp.Models.Shared
@using Telimena.WebApp.UiStrings
@model Telimena.WebApp.Models.ProgramManagement.ProgramManagementViewModel
@{
    ViewBag.Title = "Index";
}

@section styles{
    <style type="text/css">

        .fileinput-button {
            position: relative;
            overflow: hidden;
        }

            .fileinput-button input {
                position: absolute;
                top: 0;
                right: 0;
                margin: 0;
                opacity: 0;
                filter: alpha(opacity=0);
                transform: translate(-300px, 0) scale(4);
                font-size: 23px;
                direction: ltr;
                cursor: pointer;
            }
    </style>
}
@Html.Partial("_TopAlertBox")

@Html.Partial("_ProgramHeaderMenu", new ProgramHeaderMenuViewModel { ProgramName = Model?.ProgramName, TelemetryKey = Model?.TelemetryKey })

<div class="row">
    <div class="col-md-6">
        <div class="box box-primary" id="@Strings.Id.ProgramSummaryBox">
            <div class="box-header">
                <h3 class="box-title">Program summary</h3>
            </div>
            <div class="box-body">
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Name: </b>
                        <a class="@Strings.Css.ProgramInfoElement pull-right">@Model.ProgramName</a>
                    </li>
                    <li class="list-group-item">
                        <b>Description: </b>
                        <span class="@Strings.Css.ProgramInfoElement pull-right">@Model.ProgramDescription</span>
                    </li>
                    <li class="list-group-item">
                        <b>Telemetry Key: </b>
                        <span class="@Strings.Css.ProgramInfoElement pull-right">@Model.TelemetryKey</span>
                    </li>
                    <li class="list-group-item">
                        <b>Internal ID: </b>
                        <span class="@Strings.Css.ProgramInfoElement pull-right">@Model.ProgramId</span>
                    </li>
                    <li class="list-group-item">
                        <b>Primary assembly name: </b>
                        <span class="@Strings.Css.ProgramInfoElement pull-right">@Model.PrimaryAssemblyName</span>
                    </li>
                    <li class="list-group-item">
                        <b>Latest version: </b>
                        <span id="latestVersion" class="pull-right">...</span>
                    </li>
                    <li class="list-group-item">
                        <b>Versions count: </b>
                        <span class="pull-right" id="versionsCount">...</span>
                    </li>
                    <li class="list-group-item">
                        <b>Download link: </b>
                        <a class="pull-right" id="@Strings.Id.DownloadProgramLink" href="@Model.ProgramDownloadUrl">@Model.ProgramDownloadUrl</a>
                    </li>

                </ul>
            </div>
        </div>

    </div>


    <div class="col-md-6">

        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Program Package Info</h3>
            </div>
            <div class="box-body">
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Package Id</b> <a class="pull-right">@(Model.ProgramPackageInfo?.Id)</a>
                    </li>
                    <li class="list-group-item">
                        <b>File Name</b> <a class="pull-right">@(Model.ProgramPackageInfo?.FileName)</a>
                    </li>
                    <li class="list-group-item">
                        <b>File Size</b> <a class="pull-right">@(Model.ProgramPackageInfo?.FileSizeBytes.GetSizeString())</a>
                    </li>
                    <li class="list-group-item">
                        <b>Version</b> <a class="pull-right">@(Model.ProgramPackageInfo?.Version)</a>
                    </li>
                    <li class="list-group-item">
                        <b>Supported toolkit version</b> <a class="pull-right">@(Model.ProgramPackageInfo?.SupportedToolkitVersion)</a>
                    </li>
                    <li class="list-group-item">
                        <b>Uploaded date</b> <a class="pull-right @Strings.Css.DateTimeConversion">@(Model.ProgramPackageInfo?.UploadedDate.ToString(Strings.DateTimeFormat))</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>


</div>

<div class="row">

<div class="col-md-4">
            <form id="@Strings.Id.UploadProgramUpdateForm" enctype="multipart/form-data" class="form-horizontal" method="post">
                <div class="box box-primary">
                    <div class="box-header">
                        <h3 class="box-title">Create Update Package</h3>
                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Toolkit version used: </label>
                            <div class="col-sm-8"><input class="form-control" placeholder="Leave blank if package contains Telimena toolkit dll" type="text" id="updatePackageToolkitVersion" /></div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Release notes: </label>
                            <div class="col-sm-8">
                                <button type="button" class="btn btn-default @Strings.Css.PrepareReleaseNotesButton" data-toggle="modal" data-target="#@Strings.Id.SetReleaseNotesModal">Set release notes</button>
                                <label class="label label-success" id="newPackageReleaseNotesSet" style="display: none;"><i class="icon fa fa-check"></i></label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-sm-4">Package: </label>
                            <div class="col-sm-8">

                                <span class="btn btn-default fileinput-button uploadedPackage">
                                    <i class="glyphicon glyphicon-plus"></i>
                                    <span>Select file</span>
                                    <input type="file" name="uploadedPackage" />
                                </span>
                            </div>
                        </div>
                        <input type="hidden" id="newPackageReleaseNotes" />
                        <div class="info-container">
                            <div class="info fileName"></div>
                            <div class="info fileType"></div>
                            <div class="info fileSize"></div>
                        </div>
                        <div class="progress" style="display: none;">
                            <div class="progress-bar" role="progressbar"
                                 aria-valuenow="0" aria-valuemin="0"
                                 aria-valuemax="100" style="width: 0%;">
                                <span></span>
                            </div>
                        </div>

                    </div>
                    <div class="box-footer">
                        <input type="submit" value="Upload Update Package" class="btn btn-block btn-primary" />
                    </div>
                </div>
            </form>
        </div>

        <div class="col-md-5">
            <div class="nav-tabs-custom" id="@Strings.Id.ManageProgramSettingsBox">
                <ul class="nav nav-tabs pull-right">
                    <li><a href="#@Strings.Id.DeleteProgramTab" id="@(Strings.Id.DeleteProgramTab)Id" data-toggle="tab">Delete</a></li>
                    <li class="active"><a href="#tab_1-1" data-toggle="tab">Set updater</a></li>
                    <li class="pull-left header"><i class="fa fa-th"></i> Manage program</li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="tab_1-1">
                        <div class="box-body">
                            <h5>Select updater which should be used with this app</h5>

                            <label class="control-label col-sm-4">Updater: </label>
                            <div class="col-sm-8">
                                @Html.DropDownList("Updaters", Model.UpdatersSelectList, new { id = @Strings.Id.UpdaterSelectList })
                            </div>
                        </div>
                        <div class="box-footer">
                            <div class="updater-description"></div>
                            <hr />
                            <input type='submit' id="@Strings.Id.SubmitUpdaterChange" value='Change updater' class="btn btn-block btn-primary" />
                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="@Strings.Id.DeleteProgramTab">
                        <div class="box-body">
                            <h5>Warning: this cannot be undone</h5>
                            <input type="button" class="btn btn-danger btn-block" id="@Strings.Id.DeleteProgramButton" value="Delete program" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <form id="@Strings.Id.UploadFullProgramPackageForm" enctype="multipart/form-data" method="post" class="form-horizontal">
                <div class="box box-primary">
                    <div class="box-header">
                        <h3 class="box-title">Main program package</h3>
                        <h5>Upload the main program package</h5>
                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Package: </label>
                            <div class="col-sm-8">

                                <span class="btn btn-default fileinput-button uploadedPackage">
                                    <i class="glyphicon glyphicon-plus"></i>
                                    <span>Select file</span>
                                    <input type="file"
                                           name="uploadedPackage" />
                                </span>
                            </div>
                        </div>
                        <div class="info-container">
                            <div class="info fileName"></div>
                            <div class="info fileType"></div>
                            <div class="info fileSize"></div>
                        </div>
                        <div class="progress" style="display: none;">
                            <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0"
                                 aria-valuemax="100" style="width: 0%;">
                                <span></span>
                            </div>
                        </div>
                    </div>
                    <div class="box-footer">
                        <input type="submit" value="Upload Main Package" class="btn btn-block btn-primary" />
                    </div>
                </div>
            </form>
        </div>
</div>
<div class="row">

    

    <div class="col-md-10">


        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Update Packages</h3>
            </div>
            <div class="box-body">
                <table class="table table-bordered table-hover dataTable" id="@Strings.Id.ProgramUpdatePackagesTable">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Uploaded Date</th>
                            <th>Id</th>
                            <th>Is Beta</th>
                            <th>FileName</th>
                            <th>Version</th>
                            <th>Toolkit Version</th>
                            <th>File Size</th>
                            <th>Release Notes</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (ProgramUpdatePackageInfoDto pkg in Model.UpdatePackages)
                        {
                        <tr>
                            <td>@pkg.ReleaseNotes</td>
                            <td class="@Strings.Css.DateTimeConversion">@pkg.UploadedDate.ToString(Strings.DateTimeFormat)</td>
                            <td>@pkg.Id</td>
                            <td style="text-align: center">
                                <input type="checkbox" data-pkg-id="@pkg.Id" class="@Strings.Css.PackageBetaToggle" onchange="TogglePackageBeta(this)" @(pkg.IsBeta ? "checked" : "") />
                            </td>
                            <td>
                                <a href="@Url.LatestApiUrl(UpdatePackagesController.Routes.Get, new { id = pkg.Id })">@pkg.FileName</a>
                            </td>
                            <td>@pkg.Version</td>
                            <td>@pkg.SupportedToolkitVersion</td>
                            <td>@pkg.FileSizeBytes.ConvertBytesToMegabytes() MB</td>
                            <td>

                                <div class="btn-group">
                                    <button type="button" class="btn btn-default btn-sm expand">Show</button>
                                    <button type="button" data-toggle="modal" data-target="#@Strings.Id.SetReleaseNotesModal" data-pkg-id="@pkg.Id" class="btn btn-default btn-sm @Strings.Css.PrepareReleaseNotesButton">Set</button>
                                </div>


                            </td>
                        </tr>
                        }
                    </tbody>

                </table>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="@Strings.Id.SetReleaseNotesModal">
    <input type="hidden" id="@Strings.Id.ReleaseNotesPkgId" />
    <div class="modal-dialog" style="width: 800px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Set release notes</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Textarea</label>
                    <textarea style="height: 600px;" class="form-control" rows="3" placeholder="Enter notes for this release..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                <button type="button" id="@Strings.Id.SubmitReleaseNotesButton" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
   
    <script type="text/javascript">
        $(document).ready(function () {
            globalUtcConversion();

            $.fn.dataTable.moment('@Strings.MomentJsDateTimeFormat');

            $('#@Strings.Id.ProgramUpdatePackagesTable').DataTable({
                "columnDefs": [
                    {
                        "targets": [ 0 ],
                        "visible": false,
                        "searchable": false
                    },
                ],
                "order": [[ 1, "desc" ]]
            });
            var updaterInfo = new Object();
            @foreach (KeyValuePair<string, string> kvp in Model.UpdaterInfo)
            {
                @:updaterInfo["@kvp.Key"] = "@kvp.Value";
            }


            LoadCurrentVersion();
            $('#@Strings.Id.DeleteProgramButton').click(function() {
                DeleteProgram(this);
            });
            $('#@Strings.Id.SubmitUpdaterChange').click(function() {
                SetUpdater(this);
            });
            $('.uploadedPackage').change(function(e) { SingleFileSelected(e, $(this).find('input')) });
            $('#@Strings.Id.UploadProgramUpdateForm').submit(CreateUpdatePackage);

            $('#@Strings.Id.UploadFullProgramPackageForm').submit(function(e) {
                e.preventDefault();
                var form = $(this);
                var formData = new FormData(form[0]);
                UploadFile(formData,
                    '@Url.LatestApiUrl(ProgramsController.Routes.Upload, new {telemetryKey = @Model.TelemetryKey})',
                    $(this).find('input'));
            });

            function PresentDescriptionOfUpdater(internalName) {

                var box = $('#@Strings.Id.UpdaterSelectList').closest('.tab-content').find('.updater-description');
                var desc = updaterInfo[internalName];
                $(box).text(htmlDecode(desc));
            }


          
            $('#@Strings.Id.UpdaterSelectList').change(function() {
                var name = $(this.selectedOptions[0]).text();
                PresentDescriptionOfUpdater(name);
            });

              $('#@Strings.Id.UpdaterSelectList').each(function() {
                var name = $(this.selectedOptions[0]).text();
                PresentDescriptionOfUpdater(name);
            });

            $(".btn.@Strings.Css.PrepareReleaseNotesButton").click(function() {
                var pkgId = $(this).data('pkg-id');
                if (!pkgId) {
                    $('#@Strings.Id.ReleaseNotesPkgId').val(''); //clear the value - setting notes for new pkg
                } else {
                    $('#@Strings.Id.ReleaseNotesPkgId').val(pkgId);
                    var url =
                        '@Url.LatestApiUrl(UpdatePackagesController.Routes.GetReleaseNotes, new {packageId = "__packageId__"})';
                    url = url.replace("__packageId__", pkgId);
                    $.get(url,
                        function(data) {
                            $('#@Strings.Id.SetReleaseNotesModal').find('textarea').val(data);
                        });
                }
            });

            $("#@Strings.Id.SubmitReleaseNotesButton").click(function() {
                var textArea = $(this).closest('.modal-content').find('textarea').val();
                var pkgId = $('#@Strings.Id.ReleaseNotesPkgId').val();
                if (!pkgId) {
                    $('#newPackageReleaseNotes').val(textArea); //setting notes for new pkg
                    $('#@Strings.Id.SetReleaseNotesModal').modal('toggle');
                    $('#newPackageReleaseNotesSet').show();
                } else {
                    var url =
                        '@Url.LatestApiUrl(UpdatePackagesController.Routes.SetReleaseNotes, new {packageId = "__packageId__"})';
                    url = url.replace("__packageId__", pkgId);
                    $.ajax({
                        type: 'PUT',
                        url: url,
                        data: { @nameof(ReleaseNotesRequest.Notes): textArea },
                        success: function(result) {
                            $('#@Strings.Id.SetReleaseNotesModal').modal('toggle');
                            showSuccessTopAlertAndRefresh("Updated release notes.");
                        },
                        error: function(xhr) {
                            showDangerTopAlert(getXhrErrorMessage(xhr));
                        }
                    });
                }

            });

            $('#@Strings.Id.ProgramUpdatePackagesTable tbody').on('click',
                '.expand',
                function() {
                    var tr = $(this).closest('tr');
                    var table = $(this).closest('table').DataTable({ "bRetrieve": true });
                    var row = table.row(tr);

                    if (row.child.isShown()) {
                        // This row is already open - close it
                        row.child.hide();
                        tr.removeClass('shown');
                    } else {
                        // Open this row
                        row.child(format(row.data())).show();
                        tr.addClass('shown');
                    }
                });

            function format(d) {

                return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;" ><tr><td><pre data-pkg-id="' + d[2] +'">' +
                    d[0] +
                    '</pre></td></tr></table>';
            }
        });


        function DeleteProgram(input) {
            if (confirm('Are you sure you want to delete the program? (this cannot be undone!)')) {

                var prgName = prompt("If you're so sure, please enter the program name", "");
                if (prgName !== '@Model.ProgramName') {
                    showWarningTopAlert("Program name mismatched. Deleting cancelled");
                    return;
                }

                $.ajax({
                    type: 'DELETE',
                    url: '@Url.LatestApiUrl(ProgramsController.Routes.Delete, new {telemetryKey = @Model.TelemetryKey})',
                    success: function(result) {
                        showSuccessTopAlert(result);
                    },
                    error: function(xhr) {
                        showDangerTopAlert(getXhrErrorMessage(xhr));
                    }
                });
            } else {
                // Do nothing!
            }

        }

        


        function SetUpdater(input) {
            var id = $('#@Strings.Id.UpdaterSelectList').val();
            var url =
                '@Url.LatestApiUrl(ProgramsController.Routes.SetUpdater, new {telemetryKey = Model.TelemetryKey, updaterId = "__updaterId__"})';
            url = url
                .replace("__updaterId__", id);

            $.ajax({
                type: 'PUT',
                url: url,
                success: function(result) {
                    showSuccessTopAlertAndRefresh(result);
                },
                error: function(xhr) {
                    showDangerTopAlert(getXhrErrorMessage(xhr));
                }
            });
        }

        function TogglePackageBeta(input) {
            var id = $(input).data("pkg-id");
            var url = '@Url.LatestApiUrl(UpdatePackagesController.Routes.ToggleBetaSetting, new {isBeta = "__isBeta__", packageId = "__packageId__"})';
            url = url
                .replace("__isBeta__", input.checked)
                .replace("__packageId__", id);

            $.ajax({
                type: 'PUT',
                url: url,
                success: function(result) {
                    showSuccessTopAlert('Set package with ID: [' + id + '] Beta flag to: ' + result);
                },
                error: function(xhr) {
                    showDangerTopAlert(getXhrErrorMessage(xhr));
                }
            });
        }

        function SingleFileSelected(evt, input) {
            var selectedFile = $(input)[0].files[0];
            if (selectedFile) {
                var fileSize = 0;
                if (selectedFile.size > 1048576) {
                    fileSize = Math.round(selectedFile.size * 100 / 1048576) / 100 + " MB";
                } else if (selectedFile.size > 1024) {
                    fileSize = Math.round(selectedFile.size * 100 / 1024) / 100 + " KB";
                } else {
                    fileSize = selectedFile.size + " Bytes";
                }
                var infoContainer = input.closest('.form-group').siblings('.info-container');
                infoContainer.find(".fileName").text("Name : " + selectedFile.name);
                infoContainer.find(".fileType").text("Type : " + selectedFile.type);
                infoContainer.find(".fileSize").text("Size : " + fileSize);
            }
        }

        function UploadFile(formData, url, button) {

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                xhr: function() {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.addEventListener('progress',
                            function(e) {
                                ProgressHandlingFunction(e, button);
                            },
                            false);
                    }
                    return myXhr;
                },
                //Ajax events
                success: function(result) {
                    showSuccessTopAlert('Uploaded package with ID: [' + result + ']');
                },
                error: function(xhr) {
                    showDangerTopAlert(getXhrErrorMessage(xhr));

                },


            });
        }


        function CreateUpdatePackage(e) {
            e.preventDefault();
            var model = {
                @nameof(CreateUpdatePackageRequest.TelemetryKey): '@Model.TelemetryKey',
                @nameof(CreateUpdatePackageRequest.PackageVersion): $('#updatePackageVersion').val(),
                @nameof(CreateUpdatePackageRequest.ToolkitVersionUsed): $('#updatePackageToolkitVersion').val(),
                @nameof(CreateUpdatePackageRequest.ReleaseNotes): $('#newPackageReleaseNotes').val(),

            };
            var modelString = JSON.stringify(model);

            ValidateUpdatePackageRequest($(this).find(':submit'), modelString, UploadFile);
        }


        function ProgressHandlingFunction(e, button) {
            var progressDiv = $(button).closest('form').find('.progress');
            $(progressDiv).show();
            var progressBar = $(progressDiv).find('.progress-bar');
            if (e.lengthComputable) {
                var percentComplete = Math.round(e.loaded * 100 / e.total);
                progressBar.css("width",
                    percentComplete + '%').attr('aria-valuenow', percentComplete);
                progressBar.find('span').text(percentComplete + "%");
            } else {
                progressBar.find('span').text('unable to compute');
            }
        }


        function ValidateUpdatePackageRequest(button, modelString, successCallback) {
            var input = $('#@Strings.Id.UploadProgramUpdateForm').find("input[name='uploadedPackage']")[0];
            if (input.files.length === 0) {
                showDangerTopAlert("File not selected");
                return;
            }

            $.ajax({
                    type: 'POST',
                    url: '@Url.LatestApiUrl(UpdatePackagesController.Routes.ValidateRequest)',
                    contentType: "application/json; charset=utf-8",
                    datatype: 'Json',
                    data: modelString
                })
                .done(function() {
                    var form = $('#@Strings.Id.UploadProgramUpdateForm')[0];
                    var formData = new FormData(form);
                    formData.append('Model', modelString);
                    successCallback(formData,
                        '@Url.LatestApiUrl(UpdatePackagesController.Routes.Upload)',
                        button);
                })
                .fail(function(xhr) {
                    showDangerTopAlert(getXhrErrorMessage(xhr));

                });
        }


        function LoadCurrentVersion() {
            $('#latestVersion').html('...');
            $.ajax({
                type: 'GET',
                url:
                    '@Url.LatestApiUrl(ProgramsController.Routes.GetLatestVersionInfo, new {telemetryKey = @Model.TelemetryKey})',
                success: function(response) {
                    if (response !== undefined) {
                        $('#latestVersion').html(response);
                    }
                }
            });
            $('#versionsCount').html('...');
            $.ajax({
                type: 'GET',
                url:
                    '@Url.LatestApiUrl(ProgramsController.Routes.GetVersionsCount, new {telemetryKey = @Model.TelemetryKey})',
                success: function(response) {
                    $('#versionsCount').html(response);
                }
            });
        }


    </script>

}
